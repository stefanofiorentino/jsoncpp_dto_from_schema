//#pragma once

#include <jsoncpp/json/json.h>
#include <jsoncpp_support/jsoncpp_support.hpp>
{{needsString}}
{{needsVector}}


{{# nested_type_properties}}
class {{property}} {
public:

    {{property}}() = default;
    {{property}}({{property}} const &) = default;
    explicit {{property}}(Json::Value const &root)
    {}


    Json::Value toJsonValue() const
    {
        Json::Value jsonValue;

        // TODO: fields go here

        return jsonValue;
    }

    std::string toStyledString() const
    {
        return this->toJsonValue().toStyledString();
    }
};
{{/ nested_type_properties}}

/**
 * {{json_schema_description}}
 */
class {{json_schema_title}} {

public:
    {{json_schema_title}}() = default;
    {{json_schema_title}}({{json_schema_title}} const &) = default;
    explicit {{json_schema_title}}(Json::Value const &root)
    {
        {{# fromJsonValue_properties}}

        {{property}}

        {{/ fromJsonValue_properties}}
    }

    {{# properties}}
    /**
     * {{description}}
     */
    const {{type}} &get_{{name}}() const { return {{name}}; }
    {{type}} &get_mutable_{{name}}() { return {{name}}; }
    void set_{{name}}(const {{type}} & {{name}}) { {{json_schema_title}}::{{name}} = {{name}}; }
    {{/ properties}}

    Json::Value toJsonValue() const
    {
        Json::Value jsonValue;
        {{# toJsonValue_properties}}

        {{property}}

        {{/ toJsonValue_properties}}
        return jsonValue;
    }

    std::string toStyledString() const
    {
        return this->toJsonValue().toStyledString();
    }

private:
{{# properties}}
    {{type}} {{name}};
{{/ properties}}
};

inline std::string to_string({{json_schema_title}} const &obj)
{
    return obj.toStyledString();
}
