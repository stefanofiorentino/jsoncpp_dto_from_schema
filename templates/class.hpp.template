//#pragma once

#include <jsoncpp/json/json.h>
#include <jsoncpp_support/jsoncpp_support.hpp>
{{needsVector}}

/**
 * {{json_schema_description}}
 */
class {{json_schema_title}} {

public:
    {{json_schema_title}}() = default;
    {{json_schema_title}}({{json_schema_title}} const &) = default;
    //{{json_schema_title}}({{json_schema_title}} &&) = default;
    //{{json_schema_title}} &operator=({{json_schema_title}} const &) = default;
    //{{json_schema_title}} &operator=({{json_schema_title}} &&) = default;
    explicit {{json_schema_title}}(Json::Value const &root) :
        {{# fromJsonValue_properties}}{{property}}, {{/ fromJsonValue_properties}}
    {}

    {{# properties}}
    /**
     * {{description}}
     */
    const {{type}} &get_{{name}}() const { return {{name}}; }
    {{type}} &get_mutable_{{name}}() { return {{name}}; }
    void set_{{name}}(const {{type}} & {{name}}) { {{json_schema_title}}::{{name}} = {{name}}; }
    {{/ properties}}

    Json::Value toJsonValue() const
    {
        Json::Value jsonValue;
{{# toJsonValue_properties}}{{property}}{{/ toJsonValue_properties}}
        return jsonValue;
    }

    std::string toStyledString() const
    {
        return this->toJsonValue().toStyledString();
    }

private:
{{# properties}}
    {{type}} {{name}};
{{/ properties}}
};

inline std::string to_string({{json_schema_title}} const &obj)
{
    return obj.toStyledString();
}